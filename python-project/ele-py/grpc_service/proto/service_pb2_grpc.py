# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import service_pb2 as service__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DataServiceStub(object):
    """数据服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetData = channel.unary_unary(
                '/eleservice.DataService/GetData',
                request_serializer=service__pb2.DataRequest.SerializeToString,
                response_deserializer=service__pb2.DataResponse.FromString,
                _registered_method=True)
        self.CreateData = channel.unary_unary(
                '/eleservice.DataService/CreateData',
                request_serializer=service__pb2.DataRequest.SerializeToString,
                response_deserializer=service__pb2.DataResponse.FromString,
                _registered_method=True)
        self.UpdateData = channel.unary_unary(
                '/eleservice.DataService/UpdateData',
                request_serializer=service__pb2.DataRequest.SerializeToString,
                response_deserializer=service__pb2.DataResponse.FromString,
                _registered_method=True)
        self.DeleteData = channel.unary_unary(
                '/eleservice.DataService/DeleteData',
                request_serializer=service__pb2.DataRequest.SerializeToString,
                response_deserializer=service__pb2.DataResponse.FromString,
                _registered_method=True)
        self.ListData = channel.unary_unary(
                '/eleservice.DataService/ListData',
                request_serializer=service__pb2.ListRequest.SerializeToString,
                response_deserializer=service__pb2.ListResponse.FromString,
                _registered_method=True)
        self.StreamData = channel.unary_stream(
                '/eleservice.DataService/StreamData',
                request_serializer=service__pb2.ListRequest.SerializeToString,
                response_deserializer=service__pb2.DataResponse.FromString,
                _registered_method=True)
        self.ProcessData = channel.stream_unary(
                '/eleservice.DataService/ProcessData',
                request_serializer=service__pb2.DataRequest.SerializeToString,
                response_deserializer=service__pb2.DataResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/eleservice.DataService/HealthCheck',
                request_serializer=service__pb2.Empty.SerializeToString,
                response_deserializer=service__pb2.HealthResponse.FromString,
                _registered_method=True)


class DataServiceServicer(object):
    """数据服务
    """

    def GetData(self, request, context):
        """获取单个数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateData(self, request, context):
        """创建数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateData(self, request, context):
        """更新数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteData(self, request, context):
        """删除数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListData(self, request, context):
        """获取数据列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamData(self, request, context):
        """流式获取数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessData(self, request_iterator, context):
        """流式处理数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetData,
                    request_deserializer=service__pb2.DataRequest.FromString,
                    response_serializer=service__pb2.DataResponse.SerializeToString,
            ),
            'CreateData': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateData,
                    request_deserializer=service__pb2.DataRequest.FromString,
                    response_serializer=service__pb2.DataResponse.SerializeToString,
            ),
            'UpdateData': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateData,
                    request_deserializer=service__pb2.DataRequest.FromString,
                    response_serializer=service__pb2.DataResponse.SerializeToString,
            ),
            'DeleteData': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteData,
                    request_deserializer=service__pb2.DataRequest.FromString,
                    response_serializer=service__pb2.DataResponse.SerializeToString,
            ),
            'ListData': grpc.unary_unary_rpc_method_handler(
                    servicer.ListData,
                    request_deserializer=service__pb2.ListRequest.FromString,
                    response_serializer=service__pb2.ListResponse.SerializeToString,
            ),
            'StreamData': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamData,
                    request_deserializer=service__pb2.ListRequest.FromString,
                    response_serializer=service__pb2.DataResponse.SerializeToString,
            ),
            'ProcessData': grpc.stream_unary_rpc_method_handler(
                    servicer.ProcessData,
                    request_deserializer=service__pb2.DataRequest.FromString,
                    response_serializer=service__pb2.DataResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=service__pb2.Empty.FromString,
                    response_serializer=service__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'eleservice.DataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('eleservice.DataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataService(object):
    """数据服务
    """

    @staticmethod
    def GetData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eleservice.DataService/GetData',
            service__pb2.DataRequest.SerializeToString,
            service__pb2.DataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eleservice.DataService/CreateData',
            service__pb2.DataRequest.SerializeToString,
            service__pb2.DataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eleservice.DataService/UpdateData',
            service__pb2.DataRequest.SerializeToString,
            service__pb2.DataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eleservice.DataService/DeleteData',
            service__pb2.DataRequest.SerializeToString,
            service__pb2.DataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eleservice.DataService/ListData',
            service__pb2.ListRequest.SerializeToString,
            service__pb2.ListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/eleservice.DataService/StreamData',
            service__pb2.ListRequest.SerializeToString,
            service__pb2.DataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/eleservice.DataService/ProcessData',
            service__pb2.DataRequest.SerializeToString,
            service__pb2.DataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eleservice.DataService/HealthCheck',
            service__pb2.Empty.SerializeToString,
            service__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
